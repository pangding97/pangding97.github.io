<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/12/csi/k8s%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>&emsp; 目前接触了几种k8s本地持久卷: hostpath, local-storage, directpv, open-local,  carina. 梳理下这几种本地存储在实现, 使用上有什么区别. </p>
<p>&emsp; 其中hostpath和local-storage为k8s原生支持的本地持久卷; directpv是minio提供的一个用于cluster minio部署的本地存储, 本质上是DAS(Direct-Attached Storage); open-local阿里提供的本地存储, 利用linux的逻辑卷管理实现本地存储; carina为博云提供的一种本地存储csi. </p>
<h1 id="k8s原生本地持久卷"><a href="#k8s原生本地持久卷" class="headerlink" title="k8s原生本地持久卷"></a>k8s原生本地持久卷</h1><h2 id="hostpath"><a href="#hostpath" class="headerlink" title="hostpath"></a>hostpath</h2><p>&emsp; hostPath卷从主机节点的文件系统把文件或目录挂载到Pod中。</p>
<p>&emsp; 几种用hostpath的场景:</p>
<ol>
<li>运行一个需要访问docker内部的容器, 把&#x2F;var&#x2F;lib&#x2F;docker作为hostpath挂载给pod;</li>
<li>容器中运行cAdivisor(容器监控), 把&#x2F;sys作为hostpath挂给pod用;</li>
<li>允许Pod指定的hostPath是否应该在Pod运行之前存在，是否应该创建它，以及它应该作为什么存在.</li>
</ol>
<p>&emsp; k8s官方文档提供的type值如下:</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Behavior</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>Empty string (default) is for backward compatibility, which means that no checks will be performed before mounting the hostPath volume.</td>
</tr>
<tr>
<td><code>DirectoryOrCreate</code></td>
<td>If nothing exists at the given path, an empty directory will be created there as needed with permission set to 0755, having the same group and ownership with Kubelet.</td>
</tr>
<tr>
<td><code>Directory</code></td>
<td>A directory must exist at the given path</td>
</tr>
<tr>
<td><code>FileOrCreate</code></td>
<td>If nothing exists at the given path, an empty file will be created there as needed with permission set to 0644, having the same group and ownership with Kubelet.</td>
</tr>
<tr>
<td><code>File</code></td>
<td>A file must exist at the given path</td>
</tr>
<tr>
<td><code>Socket</code></td>
<td>A UNIX socket must exist at the given path</td>
</tr>
<tr>
<td><code>CharDevice</code></td>
<td>A character device must exist at the given path</td>
</tr>
<tr>
<td><code>BlockDevice</code></td>
<td>A block device must exist at the given path</td>
</tr>
</tbody></table>
<p>&emsp; 使用hostpath的卷, 需要注意, 原因如下: </p>
<ul>
<li>HostPaths可以公开特权系统凭据(例如Kubelet)或特权api(例如容器运行时套接字)，这可以用于容器逃逸或攻击集群的其他部分。</li>
<li>由于每个节点上的文件不同，具有相同配置的pod(例如从PodTemplate创建的pod)在不同节点上的行为可能不同.</li>
<li>在宿主机上创建的文件或目录只能由根用户写。要么需要在特权容器中以root身份运行进程，要么需要修改主机上的文件权限，以便能够写入hostPath卷. 使用特权容器也会带来一定的安全隐患.</li>
</ul>
<p>使用<code>FileOrCreate</code>配置的hostpath示例:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-webserver</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-webserver</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.k8s.io/test-webserver:latest</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/local/aaa</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mydir</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/local/aaa/1.txt</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myfile</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mydir</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># Ensure the file directory is created.</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/local/aaa</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myfile</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/local/aaa/1.txt</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">FileOrCreate</span></span><br></pre></td></tr></table></figure>
<p>&esmp; &lt;<font color=orange>注意: FileOrCreate不会创建文件的父目录, 如果父目录不存在, 则会失败</font>&gt;</p>
<h2 id="local-storage"><a href="#local-storage" class="headerlink" title="local-storage"></a>local-storage</h2><p>&emsp; <code>local-storage</code>表示挂载的本地存储设备，如磁盘、分区或目录.</p>
<p>&emsp; <code>local-storage</code>只能作为静态创建的PersistentVolume使用. 不支持动态发放. 即使用时, 需要先静态的创建好pv, 再提供给pod使用. </p>
<p>&emsp; 与hostPath卷相比，<code>local-storage</code>以持久和可移植的方式使用，无需手动将pod调度到节点。通过查看PersistentVolume上的节点亲和性来了解卷的节点约束。</p>
<p>&emsp; <code>local</code>卷取决于底层node的可用性, 并不适合所有应用.  如果节点状态变得不健康, 本地卷无法被pod访问.  使用这个卷的pod不能正常运行. 使用本地卷的应用必须可以容忍这种可用性的降低. 以及潜在的数据丢失, 这取决于底层磁盘的持久性特征. </p>
<p>&emsp; 以下是一个使用<code>local-storage</code>的pv示例: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">100Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/mnt/disks/ssd1</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">          <span class="attr">values:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">example-node</span></span><br></pre></td></tr></table></figure>

<p>&emsp; 使用本地卷时, 必须设置<code>spec.nodeAffinity</code>. Kubernetes调度器使用<code>spec.nodeAffinity</code>将pod调度到正确的节点.</p>
<p>&emsp; PV的 <code>volumeMode</code> 可以被设置为 “Block” (而非默认值: “Filesystem”) , 以以公开本地卷作为原始块设备. </p>
<p>&emsp; 当使用本地卷时，建议创建一个<code>StorageClass</code>, 将<code>volumeBindingMode</code>设置为<code>WaitForFirstConsumer</code>.  延迟卷绑定确保pvc绑定决策也将使用Pod可能具有的任何其他节点约束进行评估，例如节点资源需求、节点选择器、Pod亲和性和Pod反亲和性。</p>
<p>&emsp; <code>local</code>本地卷的sc如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">local-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/no-provisioner</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">WaitForFirstConsumer</span></span><br></pre></td></tr></table></figure>

<p>&emsp; 如果不使用外部静态提供程序来管理卷的生命周期, 则需要用户手动清理和删除本地PV. 我们使用时, 没有使用外部程序进行生命周期管理, 如果本地卷对应的本地磁盘被写满, 需要手动删除数据. </p>
<p>&emsp; <code>hostpath</code>和 <code>local</code> 都是属于静态的卷, 不支持扩容, 当宿主机的磁盘写满时, 需要手动的扩充磁盘. 并且指定的持久卷无法限制使用容量, 例如一个磁盘上创建了五个卷, 这五个卷抢占磁盘资源, 直至磁盘被占满. 虽然使用<code>local</code>卷时, 会设置<code>capacity</code>, 但实际上这个字段不会生效. </p>
<p>&emsp; 个人认为<code>local</code>卷与<code>hostpath</code>相比, 只是多提供了一个节点亲和的特性, 不需要手动调度pod到指定节点, 其余没有太大区别.  k8s原生的本地存储都支持当PV被删除,  当再指定同样的路径时, pod仍然可以读取之前的数据, 这是因为数据是直接写在磁盘中的. </p>
<h1 id="external-csi"><a href="#external-csi" class="headerlink" title="external csi"></a>external csi</h1><h2 id="open-local"><a href="#open-local" class="headerlink" title="open-local"></a>open-local</h2><p>&emsp; open-local 是阿里巴巴开源的一款本地存储管理系统。通过 open-local，在 Kubernetes 上使用本地存储就像使用集中式存储一样简单。目前 open-local 支持以下存储特性：<strong>本地存储池管理、存储卷动态分配、存储调度算法扩展、存储卷扩容、存储卷快照、存储卷监控、存储卷 IO 限流、原生块设备及临时卷。</strong></p>
<h3 id="1-use-case"><a href="#1-use-case" class="headerlink" title="1. use case"></a>1. use case</h3><ul>
<li>应用本身已支持多副本高可用，希望使用本地盘以提高存储资源利用率，提高数据读写性能，如 HBase、MinIO 等。  </li>
<li>应用期望数据卷具备容量隔离能力，避免出现诸如日志打满系统盘的情况。  </li>
<li>应用需要大量本地存储并依赖节点保持，如 etcd、zookeeper、Elasticsearch 等。  </li>
<li>集群本地磁盘数量众多，希望通过调度器实现有状态应用的自动化部署。  </li>
<li>通过存储快照能力为数据库类应用备份瞬时数据等。</li>
</ul>
<h3 id="2-架构"><a href="#2-架构" class="headerlink" title="2. 架构"></a>2. 架构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Master                                                                      │</span><br><span class="line">│                   ┌───┬───┐           ┌────────────────┐                    │</span><br><span class="line">│                   │Pod│PVC│           │   API-Server   │                    │</span><br><span class="line">│                   └───┴┬──┘           └────────────────┘                    │</span><br><span class="line">│                        │ bound                ▲                             │</span><br><span class="line">│                        ▼                      │ watch                       │</span><br><span class="line">│                      ┌────┐           ┌───────┴────────┐                    │</span><br><span class="line">│                      │ PV │           │ Kube-Scheduler │                    │</span><br><span class="line">│                      └────┘         ┌─┴────────────────┴─┐                  │</span><br><span class="line">│                        ▲            │     open-local     │                  │</span><br><span class="line">│                        │            │ scheduler-extender │                  │</span><br><span class="line">│                        │      ┌────►└────────────────────┘◄───┐             │</span><br><span class="line">│ ┌──────────────────┐   │      │               ▲               │             │</span><br><span class="line">│ │ NodeLocalStorage │   │create│               │               │  callback   │</span><br><span class="line">│ │    InitConfig    │  ┌┴──────┴─────┐  ┌──────┴───────┐  ┌────┴────────┐    │</span><br><span class="line">│ └──────────────────┘  │  External   │  │   External   │  │  External   │    │</span><br><span class="line">│          ▲            │ Provisioner │  │   Resizer    │  │ Snapshotter │    │</span><br><span class="line">│          │ watch      ├─────────────┤  ├──────────────┤  ├─────────────┤    │</span><br><span class="line">│    ┌─────┴──────┐     ├─────────────┴──┴──────────────┴──┴─────────────┤GRPC│</span><br><span class="line">│    │ open-local │     │                 open-local                     │    │</span><br><span class="line">│    │ controller │     │             CSI ControllerServer               │    │</span><br><span class="line">│    └─────┬──────┘     └────────────────────────────────────────────────┘    │</span><br><span class="line">│          │ create                                                           │</span><br><span class="line">└──────────┼──────────────────────────────────────────────────────────────────┘</span><br><span class="line">           │</span><br><span class="line">┌──────────┼──────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Worker   │                                                                  │</span><br><span class="line">│          │                                                                  │</span><br><span class="line">│          ▼                ┌───────────┐                                     │</span><br><span class="line">│ ┌──────────────────┐      │  Kubelet  │                                     │</span><br><span class="line">│ │ NodeLocalStorage │      └─────┬─────┘                                     │</span><br><span class="line">│ └──────────────────┘            │ GRPC                     Shared Disks     │</span><br><span class="line">│          ▲                      ▼                          ┌───┐  ┌───┐     │</span><br><span class="line">│          │              ┌────────────────┐                 │sdb│  │sdc│     │</span><br><span class="line">│          │              │   open-local   │ create volume   └───┘  └───┘     │</span><br><span class="line">│          │              │ CSI NodeServer ├───────────────► VolumeGroup      │</span><br><span class="line">│          │              └────────────────┘                                  │</span><br><span class="line">│          │                                                                  │</span><br><span class="line">│          │                                                 Exclusive Disks  │</span><br><span class="line">│          │                ┌─────────────┐                  ┌───┐            │</span><br><span class="line">│          │ update         │ open-local  │  init device     │sdd│            │</span><br><span class="line">│          └────────────────┤    agent    ├────────────────► └───┘            │</span><br><span class="line">│                           └─────────────┘                  Block Device     │</span><br><span class="line">│                                                                             │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>
<h4 id="2-1-open-local-包含四个组件："><a href="#2-1-open-local-包含四个组件：" class="headerlink" title="2.1 open-local 包含四个组件："></a>2.1 open-local 包含四个组件：</h4><p>1）<strong>scheduler-extender</strong>：作为 Kube-Scheduler 的扩展组件，通过 Extender 方式实现，新增本地存储调度算法。</p>
<p>2）<strong>CSI 插件</strong>：按照 CSI(Container Storage Interface) 标准实现本地磁盘管理能力，包含创建&#x2F;删除&#x2F;扩容存储卷、创建&#x2F;删除快照、暴露存储卷 metrics 等能力。</p>
<p>3）<strong>agent</strong>：运行在集群中的每个节点，根据配置清单初始化存储设备，并通过上报集群中本地存储设备信息以供 Scheduler-Extender 决策调度。</p>
<p>4）<strong>controller</strong>：获取集群存储初始化配置，并向运行在各个节点的 Agent 下发详细的资源配置清单。</p>
<h4 id="2-2-open-local-包含两个-CRD"><a href="#2-2-open-local-包含两个-CRD" class="headerlink" title="2.2 open-local 包含两个 CRD"></a>2.2 open-local 包含两个 CRD</h4><p>1）<strong>NodeLocalStorage</strong>：open-local 通过 NodeLocalStorage 资源上报每个节点上的存储设备信息，该资源由 controller 创建，由每个节点的 agent 组件更新其 status。该 CRD 属于全局范围的资源。</p>
<p>2）<strong>NodeLocalStorageInitConfig</strong>：open-local controller 可通过 NodeLocalStorageInitConfig 资源创建每个 NodeLocalStorage 资源。NodeLocalStorageInitConfig 资源中包含全局默认节点配置和特定节点配置，若节点的 node label 满足表达式则使用特定节点配置，否则使用默认配置。</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>&emsp; open-local部署依赖宿主机的<code>lvm</code>, 当动态创建一个持久卷时, open-local会在指定的VG(volume group)中创建一个逻辑卷, 该逻辑卷包含指定的size, 并将该逻辑卷挂给pod使用. PV扩容同理, open-local会使用<code>lvextend</code>对逻辑卷扩容. </p>
<h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>其余待补充</p>
<h1 id="Refer-to"><a href="#Refer-to" class="headerlink" title="Refer to"></a>Refer to</h1><p><a href="https://kubernetes.io/docs/concepts/storage/">Storage | Kubernetes</a><br><a href="https://developer.aliyun.com/article/1008540">如何通过 open-local 玩转容器本地存储? | 龙蜥技术-阿里云开发者社区 (aliyun.com)</a></p>
]]></content>
  </entry>
</search>
